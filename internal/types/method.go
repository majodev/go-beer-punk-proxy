// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Method Method
//
// swagger:model method
type Method struct {

	// fermentation
	// Required: true
	Fermentation *Fermentation `json:"fermentation"`

	// mash temp
	// Required: true
	MashTemp []*MashTemp `json:"mash_temp"`

	// twist
	Twist interface{} `json:"twist,omitempty"`
}

// Validate validates this method
func (m *Method) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFermentation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMashTemp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Method) validateFermentation(formats strfmt.Registry) error {

	if err := validate.Required("fermentation", "body", m.Fermentation); err != nil {
		return err
	}

	if m.Fermentation != nil {
		if err := m.Fermentation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fermentation")
			}
			return err
		}
	}

	return nil
}

func (m *Method) validateMashTemp(formats strfmt.Registry) error {

	if err := validate.Required("mash_temp", "body", m.MashTemp); err != nil {
		return err
	}

	for i := 0; i < len(m.MashTemp); i++ {
		if swag.IsZero(m.MashTemp[i]) { // not required
			continue
		}

		if m.MashTemp[i] != nil {
			if err := m.MashTemp[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mash_temp" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this method based on the context it is used
func (m *Method) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFermentation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMashTemp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Method) contextValidateFermentation(ctx context.Context, formats strfmt.Registry) error {

	if m.Fermentation != nil {
		if err := m.Fermentation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fermentation")
			}
			return err
		}
	}

	return nil
}

func (m *Method) contextValidateMashTemp(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MashTemp); i++ {

		if m.MashTemp[i] != nil {
			if err := m.MashTemp[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mash_temp" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Method) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Method) UnmarshalBinary(b []byte) error {
	var res Method
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
