# // Code generated by "make swagger"; DO NOT EDIT.
consumes:
- application/json
produces:
- application/json
swagger: "2.0"
info:
  description: Beer Workshop API Documentation
  title: github.com/majodev/go-beer-punk-proxy
  version: 0.1.0
paths:
  /-/healthy:
    get:
      security:
      - Management: []
      description: |-
        This endpoint returns 200 when the service is healthy.
        Returns an human readable string about the current service status.
        In addition to readiness probes, it performs actual write probes.
        Note that /-/healthy is private (shielded by the mgmt-secret) as it may expose sensitive information about your service.
      produces:
      - text/plain
      tags:
      - common
      summary: Get healthy (liveness probe)
      operationId: GetHealthyRoute
      responses:
        "200":
          description: Ready.
        "521":
          description: Not ready.
  /-/ready:
    get:
      description: |-
        This endpoint returns 200 when the service is ready to serve traffic.
        Does read-only probes apart from the general server ready state.
        Note that /-/ready is typically public (and not shielded by a mgmt-secret), we thus prevent information leakage here and only return `"Ready."`.
      produces:
      - text/plain
      tags:
      - common
      summary: Get ready (readiness probe)
      operationId: GetReadyRoute
      responses:
        "200":
          description: Ready.
        "521":
          description: Not ready.
  /api/v1/admin/beers:
    post:
      security:
      - Management: []
      description: Admin
      tags:
      - admin
      summary: Post Beer
      operationId: PostBeerRoute
      parameters:
      - name: Payload
        in: body
        schema:
          $ref: '#/definitions/postBeerPayload'
      responses:
        "200":
          description: PostBeerResponse
          schema:
            $ref: '#/definitions/beer'
  /api/v1/auth/change-password:
    post:
      security:
      - Bearer: []
      description: |-
        After successful password change, all current access and refresh tokens are
        invalidated and a new set of auth tokens is returned
      tags:
      - auth
      summary: Change local user's password
      operationId: PostChangePasswordRoute
      parameters:
      - name: Payload
        in: body
        schema:
          $ref: '#/definitions/postChangePasswordPayload'
      responses:
        "200":
          description: PostLoginResponse
          schema:
            $ref: '#/definitions/postLoginResponse'
        "400":
          description: PublicHTTPValidationError, type `INVALID_PASSWORD`
          schema:
            $ref: '#/definitions/publicHttpValidationError'
        "401":
          description: PublicHTTPError
          schema:
            $ref: '#/definitions/publicHttpError'
        "403":
          description: PublicHTTPError, type `USER_DEACTIVATED`/`NOT_LOCAL_USER`
          schema:
            $ref: '#/definitions/publicHttpError'
  /api/v1/auth/forgot-password:
    post:
      description: |-
        Initiates a password reset for a local user, sending an email with a password
        reset link to the provided email address if a user account exists. Will always
        succeed, even if no user was found in order to prevent user enumeration
      tags:
      - auth
      summary: Initiate password reset for local user
      operationId: PostForgotPasswordRoute
      parameters:
      - name: Payload
        in: body
        schema:
          $ref: '#/definitions/postForgotPasswordPayload'
      responses:
        "204":
          description: Success
        "400":
          description: PublicHTTPValidationError
          schema:
            $ref: '#/definitions/publicHttpValidationError'
  /api/v1/auth/forgot-password/complete:
    post:
      description: |-
        Completes a password reset for a local user, using the password reset token sent via email
        to confirm user access, setting the new password if successful. All current access and refresh
        tokens are invalidated and a new set of auth tokens is returned
      tags:
      - auth
      summary: Completes password reset for local user
      operationId: PostForgotPasswordCompleteRoute
      parameters:
      - name: Payload
        in: body
        schema:
          $ref: '#/definitions/postForgotPasswordCompletePayload'
      responses:
        "200":
          description: PostLoginResponse
          schema:
            $ref: '#/definitions/postLoginResponse'
        "400":
          description: PublicHTTPValidationError, type `INVALID_PASSWORD`
          schema:
            $ref: '#/definitions/publicHttpValidationError'
        "403":
          description: PublicHTTPError, type `USER_DEACTIVATED`/`NOT_LOCAL_USER`
          schema:
            $ref: '#/definitions/publicHttpError'
        "404":
          description: PublicHTTPError, type `TOKEN_NOT_FOUND`
          schema:
            $ref: '#/definitions/publicHttpError'
        "409":
          description: PublicHTTPError, type `TOKEN_EXPIRED`
          schema:
            $ref: '#/definitions/publicHttpError'
  /api/v1/auth/login:
    post:
      description: Returns an access and refresh token on successful authentication
      tags:
      - auth
      summary: Login with local user
      operationId: PostLoginRoute
      parameters:
      - name: Payload
        in: body
        schema:
          $ref: '#/definitions/postLoginPayload'
      responses:
        "200":
          description: PostLoginResponse
          schema:
            $ref: '#/definitions/postLoginResponse'
        "400":
          description: PublicHTTPValidationError
          schema:
            $ref: '#/definitions/publicHttpValidationError'
        "401":
          description: PublicHTTPError
          schema:
            $ref: '#/definitions/publicHttpError'
        "403":
          description: PublicHTTPError, type `USER_DEACTIVATED`
          schema:
            $ref: '#/definitions/publicHttpError'
  /api/v1/auth/logout:
    post:
      security:
      - Bearer: []
      description: |-
        Logs the local user out, destroying the provided access token.
        A refresh token can optionally be provided, destroying it as well if found.
      tags:
      - auth
      summary: Log out local user
      operationId: PostLogoutRoute
      parameters:
      - name: Payload
        in: body
        schema:
          $ref: '#/definitions/postLogoutPayload'
      responses:
        "204":
          description: Success
        "400":
          description: PublicHTTPValidationError
          schema:
            $ref: '#/definitions/publicHttpValidationError'
        "401":
          description: PublicHTTPError
          schema:
            $ref: '#/definitions/publicHttpError'
  /api/v1/auth/refresh:
    post:
      description: |-
        Return a fresh set of access and refresh tokens if a valid refresh token was provided.
        The old refresh token used to authenticate the request will be invalidated.
      tags:
      - auth
      summary: Refresh tokens
      operationId: PostRefreshRoute
      parameters:
      - name: Payload
        in: body
        schema:
          $ref: '#/definitions/postRefreshPayload'
      responses:
        "200":
          description: PostLoginResponse
          schema:
            $ref: '#/definitions/postLoginResponse'
        "400":
          description: PublicHTTPValidationError
          schema:
            $ref: '#/definitions/publicHttpValidationError'
        "401":
          description: PublicHTTPError
          schema:
            $ref: '#/definitions/publicHttpError'
        "403":
          description: PublicHTTPError, type `USER_DEACTIVATED`
          schema:
            $ref: '#/definitions/publicHttpError'
  /api/v1/auth/register:
    post:
      description: Returns an access and refresh token on successful registration
      tags:
      - auth
      summary: Registers a local user
      operationId: PostRegisterRoute
      parameters:
      - name: Payload
        in: body
        schema:
          $ref: '#/definitions/postRegisterPayload'
      responses:
        "200":
          description: PostLoginResponse
          schema:
            $ref: '#/definitions/postLoginResponse'
        "400":
          description: PublicHTTPValidationError, type `INVALID_PASSWORD`
          schema:
            $ref: '#/definitions/publicHttpValidationError'
        "409":
          description: PublicHTTPError, type `USER_ALREADY_EXISTS`
          schema:
            $ref: '#/definitions/publicHttpError'
  /api/v1/auth/userinfo:
    get:
      security:
      - Bearer: []
      description: |-
        Returns user information compatible with the OpenID Connect Core 1.0 specification.
        Information returned depends on the requesting user as some data is only available if an app user profile exists.
      tags:
      - auth
      summary: Get user info
      operationId: GetUserInfoRoute
      responses:
        "200":
          description: GetUserInfoResponse
          schema:
            $ref: '#/definitions/getUserInfoResponse'
  /api/v1/beers:
    get:
      security:
      - Bearer: []
      description: A partial reimplementation of https://punkapi.com/documentation/v2
      tags:
      - beers
      summary: Get beers
      operationId: GetBeersRoute
      parameters:
      - minimum: 1
        type: integer
        default: 1
        description: page
        name: page
        in: query
      - maximum: 80
        minimum: 1
        type: integer
        default: 25
        description: per_page
        name: per_page
        in: query
      - type: integer
        description: Returns all beers with ABV greater than the supplied number
        name: abv_gt
        in: query
      - type: integer
        description: Returns all beers with ABV less than the supplied number
        name: abv_lt
        in: query
      - type: integer
        description: Returns all beers with IBU greater than the supplied number
        name: ibu_gt
        in: query
      - type: integer
        description: Returns all beers with IBU less than the supplied number
        name: ibu_lt
        in: query
      - type: integer
        description: Returns all beers with EBC greater than the supplied number
        name: ebc_gt
        in: query
      - type: integer
        description: Returns all beers with EBC less than the supplied number
        name: ebc_lt
        in: query
      - type: string
        x-nullable: true
        description: Returns all beers matching the supplied name (this will match
          partial strings as well so e.g punk will return Punk IPA), if you need to
          add spaces just add an underscore (_).
        name: beer_name
        in: query
      responses:
        "200":
          description: GetBeersResponse
          schema:
            $ref: '#/definitions/getBeersResponse'
  /api/v1/beers/random:
    get:
      security:
      - Bearer: []
      description: |-
        Gets a random beer from the API, this takes no paramaters.
        Mirror of https://punkapi.com/documentation/v2
      tags:
      - beers
      summary: Get Random Beer
      operationId: GetRandomBeerRoute
      responses:
        "200":
          description: GetBeersResponse
          schema:
            $ref: '#/definitions/getBeersResponse'
  /api/v1/beers/{id}:
    get:
      security:
      - Bearer: []
      description: |-
        Gets a beer from the api using the beers id.
        Mirror of https://punkapi.com/documentation/v2
      tags:
      - beers
      summary: Get a Single Beer
      operationId: GetBeerRoute
      parameters:
      - minimum: 1
        type: integer
        description: BeerID
        name: id
        in: path
        required: true
      responses:
        "200":
          description: GetBeersResponse
          schema:
            $ref: '#/definitions/getBeersResponse'
        "404":
          description: PublicHTTPError, type `BEER_NOT_FOUND`
          schema:
            $ref: '#/definitions/publicHttpError'
  /api/v1/push/test:
    get:
      security:
      - Bearer: []
      description: Sends a test push message to the current user
      tags:
      - test
      summary: Send test push
      operationId: GetPushTestRoute
      deprecated: true
      responses:
        "200":
          description: OK
  /api/v1/push/token:
    put:
      security:
      - Bearer: []
      description: |-
        Adds a push token for the given provider to the current user.
        If the oldToken is present it will be deleted.
        Currently only the provider 'fcm' is supported.
      tags:
      - push
      summary: Adds a push token to the user
      operationId: PostUpdatePushTokenRoute
      parameters:
      - name: Payload
        in: body
        schema:
          $ref: '#/definitions/postUpdatePushTokenPayload'
      responses:
        "200":
          description: OK
        "404":
          description: PublicHTTPError, type `OLD_PUSH_TOKEN_NOT_FOUND`
          schema:
            $ref: '#/definitions/publicHttpError'
        "409":
          description: PublicHTTPError, type `PUSH_TOKEN_ALREADY_EXISTS`
          schema:
            $ref: '#/definitions/publicHttpError'
  /swagger.yml:
    get:
      description: |-
        OpenAPI Specification ver. 2 (fka Swagger)
        Returns our handcrafted and validated `swagger.yml`.
      produces:
      - text/plain
      tags:
      - common
      summary: Get swagger.yml
      operationId: GetSwaggerRoute
      responses:
        "200":
          description: OK
definitions:
  add:
    type: string
    title: Add
  attribute:
    type: string
    title: Attribute
  beer:
    type: object
    title: Beer
    required:
    - abv
    - attenuation_level
    - boil_volume
    - brewers_tips
    - contributed_by
    - description
    - first_brewed
    - food_pairing
    - id
    - ingredients
    - method
    - name
    - tagline
    - target_fg
    - target_og
    - volume
    properties:
      abv:
        type: number
      attenuation_level:
        type: number
      boil_volume:
        $ref: '#/definitions/boilVolume'
      brewers_tips:
        type: string
      contributed_by:
        type: string
      description:
        type: string
      ebc:
        additionalProperties: false
      first_brewed:
        type: string
      food_pairing:
        type: array
        items:
          type: string
      ibu:
        additionalProperties: false
      id:
        type: integer
      image_url:
        type: string
        format: uri
      ingredients:
        $ref: '#/definitions/ingredients'
      method:
        $ref: '#/definitions/method'
      name:
        type: string
      ph:
        additionalProperties: false
      srm:
        additionalProperties: false
      tagline:
        type: string
      target_fg:
        type: integer
      target_og:
        type: number
      volume:
        $ref: '#/definitions/boilVolume'
    additionalProperties: false
  boilVolume:
    type: object
    title: BoilVolume
    required:
    - unit
    properties:
      unit:
        $ref: '#/definitions/unit'
      value:
        type: number
    additionalProperties: false
  fermentation:
    type: object
    title: Fermentation
    required:
    - temp
    properties:
      temp:
        $ref: '#/definitions/boilVolume'
    additionalProperties: false
  getBeersResponse:
    type: array
    items:
      $ref: '#/definitions/beer'
  getUserInfoResponse:
    type: object
    required:
    - sub
    - updated_at
    properties:
      email:
        description: Email address of user, if available
        type: string
        format: email
        maxLength: 255
        example: user@example.com
      scopes:
        description: Auth-Scopes of the user, if available
        type: array
        items:
          type: string
          enum:
          - app
          - cms
        example:
        - app
      sub:
        description: ID of user
        type: string
        example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
      updated_at:
        description: Unix timestamp the user's info was last updated at
        type: integer
        example: 1591960808
  hop:
    type: object
    title: Hop
    required:
    - add
    - amount
    - attribute
    - name
    properties:
      add:
        $ref: '#/definitions/add'
      amount:
        $ref: '#/definitions/boilVolume'
      attribute:
        $ref: '#/definitions/attribute'
      name:
        type: string
    additionalProperties: false
  httpValidationErrorDetail:
    type: object
    required:
    - key
    - in
    - error
    properties:
      error:
        description: Error describing field validation failure
        type: string
      in:
        description: Indicates how the invalid field was provided
        type: string
      key:
        description: Key of field failing validation
        type: string
  ingredients:
    type: object
    title: Ingredients
    required:
    - hops
    - malt
    properties:
      hops:
        type: array
        items:
          $ref: '#/definitions/hop'
      malt:
        type: array
        items:
          $ref: '#/definitions/malt'
      yeast:
        type: string
    additionalProperties: false
  malt:
    type: object
    title: Malt
    required:
    - amount
    - name
    properties:
      amount:
        $ref: '#/definitions/boilVolume'
      name:
        type: string
    additionalProperties: false
  mashTemp:
    type: object
    title: MashTemp
    required:
    - temp
    properties:
      duration:
        additionalProperties: false
      temp:
        $ref: '#/definitions/boilVolume'
    additionalProperties: false
  method:
    type: object
    title: Method
    required:
    - fermentation
    - mash_temp
    properties:
      fermentation:
        $ref: '#/definitions/fermentation'
      mash_temp:
        type: array
        items:
          $ref: '#/definitions/mashTemp'
      twist:
        additionalProperties: false
    additionalProperties: false
  orderDir:
    type: string
    enum:
    - asc
    - desc
  postBeerPayload:
    type: object
    title: Beer
    required:
    - abv
    - attenuation_level
    - boil_volume
    - brewers_tips
    - contributed_by
    - description
    - first_brewed
    - food_pairing
    - ingredients
    - method
    - name
    - tagline
    - target_fg
    - target_og
    - volume
    properties:
      abv:
        type: number
      attenuation_level:
        type: number
      boil_volume:
        $ref: '#/definitions/boilVolume'
      brewers_tips:
        type: string
      contributed_by:
        type: string
      description:
        type: string
      ebc:
        type: number
      first_brewed:
        type: string
        example: 04/2008
      food_pairing:
        type: array
        items:
          type: string
      ibu:
        type: number
      image_url:
        type: string
        format: uri
        example: https://images.punkapi.com/v2/2.png
      ingredients:
        $ref: '#/definitions/ingredients'
      method:
        $ref: '#/definitions/method'
      name:
        type: string
      ph:
        type: number
      srm:
        type: number
      tagline:
        type: string
      target_fg:
        type: integer
      target_og:
        type: number
      volume:
        $ref: '#/definitions/boilVolume'
    additionalProperties: false
  postChangePasswordPayload:
    type: object
    required:
    - currentPassword
    - newPassword
    properties:
      currentPassword:
        description: Current password of user
        type: string
        maxLength: 500
        minLength: 1
        example: correct horse battery staple
      newPassword:
        description: New password to set for user
        type: string
        maxLength: 500
        minLength: 1
        example: correct horse battery staple
  postForgotPasswordCompletePayload:
    type: object
    required:
    - token
    - password
    properties:
      password:
        description: New password to set for user
        type: string
        maxLength: 500
        minLength: 1
        example: correct horse battery staple
      token:
        description: Password reset token sent via email
        type: string
        format: uuid4
        example: ec16f032-3c44-4148-bbcc-45557466fa74
  postForgotPasswordPayload:
    type: object
    required:
    - username
    properties:
      username:
        description: Username to initiate password reset for
        type: string
        format: email
        maxLength: 255
        minLength: 1
        example: user@example.com
  postLoginPayload:
    type: object
    required:
    - username
    - password
    properties:
      password:
        description: Password of user to authenticate as
        type: string
        maxLength: 500
        minLength: 1
        example: correct horse battery staple
      username:
        description: Username of user to authenticate as
        type: string
        format: email
        maxLength: 255
        minLength: 1
        example: user@example.com
  postLoginResponse:
    type: object
    required:
    - access_token
    - token_type
    - expires_in
    - refresh_token
    properties:
      access_token:
        description: Access token required for accessing protected API endpoints
        type: string
        format: uuid4
        example: c1247d8d-0d65-41c4-bc86-ec041d2ac437
      expires_in:
        description: Access token expiry in seconds
        type: integer
        format: int64
        example: 86400
      refresh_token:
        description: Refresh token for refreshing the access token once it expires
        type: string
        format: uuid4
        example: 1dadb3bd-50d8-485d-83a3-6111392568f0
      token_type:
        description: Type of access token, will always be `bearer`
        type: string
        example: bearer
  postLogoutPayload:
    type: object
    properties:
      refresh_token:
        description: Optional refresh token to delete while logging out
        type: string
        format: uuid4
        example: 700ebed3-40f7-4211-bc83-a89b22b9875e
  postRefreshPayload:
    type: object
    required:
    - refresh_token
    properties:
      refresh_token:
        description: Refresh token to use for retrieving new token set
        type: string
        format: uuid4
        example: 7503cd8a-c921-4368-a32d-6c1d01d86da9
  postRegisterPayload:
    type: object
    required:
    - username
    - password
    properties:
      password:
        description: Password to register with
        type: string
        maxLength: 500
        minLength: 1
        example: correct horse battery staple
      username:
        description: Username to register with
        type: string
        format: email
        maxLength: 255
        minLength: 1
        example: user@example.com
  postUpdatePushTokenPayload:
    type: object
    required:
    - newToken
    - provider
    properties:
      newToken:
        description: New push token for given provider.
        type: string
        maxLength: 500
        example: 1c91e550-8167-439c-8021-dee7de2f7e96
      oldToken:
        description: Old token that can be deleted if present.
        type: string
        maxLength: 500
        x-nullable: true
        example: 495179de-b771-48f0-aab2-8d23701b0f02
      provider:
        description: Identifier of the provider the token is for (eg. "fcm", "apn").
          Currently only "fcm" is supported.
        type: string
        maxLength: 500
        example: fcm
  publicHttpError:
    type: object
    required:
    - status
    - type
    - title
    properties:
      detail:
        description: More detailed, human-readable, optional explanation of the error
        type: string
        example: User is lacking permission to access this resource
      status:
        description: HTTP status code returned for the error
        type: integer
        format: int64
        maximum: 599
        minimum: 100
        x-go-name: Code
        example: 403
      title:
        description: Short, human-readable description of the error
        type: string
        example: Forbidden
      type:
        description: Type of error returned, should be used for client-side error
          handling
        type: string
        example: generic
  publicHttpValidationError:
    type: object
    required:
    - validationErrors
    allOf:
    - $ref: '#/definitions/publicHttpError'
    properties:
      validationErrors:
        description: List of errors received while validating payload against schema
        type: array
        items:
          $ref: '#/definitions/httpValidationErrorDetail'
  unit:
    type: string
    title: Unit
responses:
  AuthForbiddenResponse:
    description: PublicHTTPError, type `USER_DEACTIVATED`/`NOT_LOCAL_USER`
    schema:
      $ref: '#/definitions/publicHttpError'
  AuthUnauthorizedResponse:
    description: PublicHTTPError
    schema:
      $ref: '#/definitions/publicHttpError'
  InvalidPasswordResponse:
    description: PublicHTTPValidationError, type `INVALID_PASSWORD`
    schema:
      $ref: '#/definitions/publicHttpValidationError'
  ValidationError:
    description: PublicHTTPValidationError
    schema:
      $ref: '#/definitions/publicHttpValidationError'
securityDefinitions:
  Bearer:
    description: |-
      Access token for application access, **must** include "Bearer " prefix.
      Example: `Bearer b4a94a42-3ea2-4af3-9699-8bcbfee6e6d2`
    type: apiKey
    name: Authorization
    in: header
    x-keyPrefix: 'Bearer '
  Management:
    description: Management secret, used for monitoring and infrastructure related
      calls
    type: apiKey
    name: mgmt-secret
    in: query
